GENERAL (in the Complete Developer Guide)

- Difference between exec packages and reusable packages (package main being the first one, and every other package the second).

- In the variable declaration tutorial its said that you cant declare and assign a variable outside of functions, thats false; what you cant do it use the shortcut :=

- Files in the same package (say we have main.go and state.go and they both have package main), can access the content of one another freely.

- You should use more custom types.  

- For writing and reading files in the system Ioutils is the package im looking for.

- When you have a custom type thats compatible with another type (ex. type C_Strings []string) you can go from one type to the other ([]string(C_strings)).

- strings package has join() and split()

- Slices in functions give references, but other types usually give a copy (including arrays).

- Lecture 31 (Random Number Generation) in the Complete developer guide shows how the instructor looks at documentation, pretty insightful.

- For the Random package of Go you have to manually set seeds.

- A good factor to have in mind when choosing whether we need a plain function or one with a receiver is if we are implying that the receiver itself will be modified

- The stuff about pointers and their relationship with customtypes is kind of different from what i experienced, check that out.
    : They put the *pointer in parenthesis, i didnt have to do that

- Go is a Pass Value type of Language (the pointers stuff)

TESTING:

    - It doesnt use a lot of frameworks, but a small interface with functions that lets u test code. 

    - How to decide what to test?
     : Its up to you to see what you care about the function. 

    - You have to take care of the cleanup. Lets say you create a file, if your test crashes or if it succeeds you have to delete the file yourself.

    - t.Errorf doesnt stop the script, so that makes it easy to cleanup.

    - You always want to make your test fail at least once so you make sure of its working.

POINTERS: 
    Operators:
     &variable: Gives the memory address of the value the variable is pointing at.
 
     *pointer: Gives the value the memory address is pointing at. 
 
     *type: Its a type description, it means were working with a pointer to a person. Should not seen as an operator.

    Gotchas:
     Like i checked earlier, slices are different in the sense that modifications in them through a function affect the original slice.